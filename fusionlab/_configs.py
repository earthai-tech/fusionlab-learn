# -*- coding: utf-8 -*-
# License: BSD-3-Clause
# Author: LKouadio <etanoyau@gmail.com>

"""
Central configuration for backend-specific object mappings.

This module acts as the single source of truth for locating objects
within different backends like TensorFlow/Keras. It allows for a
clean separation of configuration from the logic in the dependency
loaders.
"""

_STANDARD_ALONE_MAP = {
    'AUTOTUNE': ('tensorflow.data', 'AUTOTUNE'),
    'Assert': ('tensorflow', 'Assert'),
    'Dataset': ('tensorflow.data', 'Dataset'),
    'GradientTape': ('tensorflow', 'GradientTape'),
    'Tensor': ('tensorflow', 'Tensor'),
    'TensorShape': ('tensorflow', 'TensorShape'),
    'Variable': ('tensorflow', 'Variable'),
    
    'abs': ('tensorflow', 'abs'),
    'activations': ('tensorflow.keras', 'activations'),
    'add': ('tensorflow.math', 'add'),
    'add_n': ('tensorflow.math', 'add_n'),
    'assert_equal': ('tensorflow', 'assert_equal'),
    'autograph': ('tensorflow', 'autograph'),
    'backend': ('tensorflow.keras', 'backend'),
    'bool': ('tensorflow', 'bool'),
    'cast': ('tensorflow', 'cast'),
    'concat': ('tensorflow', 'concat'),
    'cond': ('tensorflow', 'cond'),
    'constant': ('tensorflow', 'constant'),
    'control_dependencies': ('tensorflow', 'control_dependencies'),
    'convert_to_tensor': ('tensorflow', 'convert_to_tensor'),
    'cos': ('tensorflow', 'cos'),
    'debugging': ('tensorflow', 'debugging'),
    'errors': ('tensorflow', 'errors'),
    'equal': ('tensorflow', 'equal'),
    'exp': ('tensorflow', 'exp'),
    'expand_dims': ('tensorflow', 'expand_dims'),
    'experimental':('tensorflow.data', 'experimental'), 
    'fill': ('tensorflow', 'fill'),
    'float32': ('tensorflow', 'float32'),
    'floordiv': ('tensorflow.math', 'floordiv'),
    'gather': ('tensorflow', 'gather'),
    'get_static_value': ('tensorflow', 'get_static_value'),
    'greater': ('tensorflow', 'greater'),
    'greater_equal': ('tensorflow', 'greater_equal'),
    'identity': ('tensorflow', 'identity'),
    'int32': ('tensorflow', 'int32'),
    'is_nan': ('tensorflow.math', 'is_nan'),
    'less': ('tensorflow', 'less'),
    'linalg': ('tensorflow', 'linalg'),
    'log': ('tensorflow.math', 'log'),
    'logical_and': ('tensorflow', 'logical_and'),
    'logical_not': ('tensorflow', 'logical_not'),
    'logical_or': ('tensorflow', 'logical_or'),
    'maximum': ('tensorflow.math', 'maximum'),
    'minimum': ('tensorflow.math', 'minimum'),
    'multiply': ('tensorflow', 'multiply'),
    'name_scope': ('tensorflow', 'name_scope'),
    'newaxis': ('tensorflow', 'newaxis'),
    'no_op': ('tensorflow', 'no_op'),
    'pad': ('tensorflow', 'pad'),
    'pow': ('tensorflow', 'pow'),
    'print': ('tensorflow', 'print'),
    'random': ('tensorflow', 'random'),
    'range': ('tensorflow', 'range'),
    'rank': ('tensorflow', 'rank'),
    'reduce_all': ('tensorflow', 'reduce_all'),
    'reduce_max': ('tensorflow', 'reduce_max'),
    'reduce_mean': ('tensorflow', 'reduce_mean'),
    'reduce_sum': ('tensorflow', 'reduce_sum'),
    'regularizers': ('tensorflow.keras', 'regularizers'),
    'repeat': ('tensorflow', 'repeat'),
    'reshape': ('tensorflow', 'reshape'),
    'set_seed': ('tensorflow.random', 'set_seed'),
    'shape': ('tensorflow', 'shape'),
    'sin': ('tensorflow', 'sin'),
    'split': ('tensorflow', 'split'),
    'squeeze': ('tensorflow', 'squeeze'),
    'square': ('tensorflow.math', 'square'),
    'stack': ('tensorflow', 'stack'),
    'subtract': ('tensorflow', 'subtract'),
    'tile': ('tensorflow', 'tile'),
    'transpose': ('tensorflow', 'transpose'),
    'unstack': ('tensorflow', 'unstack'),
    'where': ('tensorflow', 'where'),
    'zeros': ('tensorflow', 'zeros'),
    'zeros_like': ('tensorflow', 'zeros_like'),
}

TENSORFLOW_CONFIG = {
    **_STANDARD_ALONE_MAP,
    'Activation': ('layers', 'Activation'),
    'Adam': ('optimizers', 'Adam'),
    'Add': ('layers', 'Add'),
    'Attention': ('layers', 'Attention'),
    'BatchNormalization': ('layers', 'BatchNormalization'),
    'Bidirectional': ('layers', 'Bidirectional'),
    'Callback': ('callbacks', 'Callback'),
    'Concatenate': ('layers', 'Concatenate'),
    'Constant': ('initializers', 'Constant'),
    'Conv1D': ('layers', 'Conv1D'),
    'Conv2D': ('layers', 'Conv2D'),
    'Dense': ('layers', 'Dense'),
    'Dropout': ('layers', 'Dropout'),
    'ELU': ('layers', 'ELU'),
    'EarlyStopping': ('callbacks', 'EarlyStopping'),
    'Embedding': ('layers', 'Embedding'),
    'Flatten': ('layers', 'Flatten'),
    'GlobalAveragePooling1D': ('layers', 'GlobalAveragePooling1D'),
    'GlobalAveragePooling2D': ('layers', 'GlobalAveragePooling2D'),
    'History': ('callbacks', 'History'),
    'Input': ('layers', 'Input'),
    'InputLayer': ('layers', 'InputLayer'),
    'K': ('backend', 'K'),
    'LSTM': ('layers', 'LSTM'),
    'LSTMCell': ('layers', 'LSTMCell'),
    'Layer': ('layers', 'Layer'),
    'LayerNormalization': ('layers', 'LayerNormalization'),
    'LearningRateScheduler': ('callbacks', 'LearningRateScheduler'),
    'Loss': ('losses', 'Loss'),
    'MaxPooling1D': ('layers', 'MaxPooling1D'),
    'MaxPooling2D': ('layers', 'MaxPooling2D'),
    'MeanAbsoluteError': ('metrics', 'MeanAbsoluteError'),
    'MeanSquaredError': ('losses', 'MeanSquaredError'),
    'Metric': ('metrics', 'Metric'),
    'Model': ('models', 'Model'),
    'ModelCheckpoint': ('callbacks', 'ModelCheckpoint'),
    'MultiHeadAttention': ('layers', 'MultiHeadAttention'),
    'Optimizer': ('optimizers', 'Optimizer'),
    'RMSprop': ('optimizers', 'RMSprop'),
    'ReduceLROnPlateau': ('callbacks', 'ReduceLROnPlateau'),
    'RepeatVector': ('layers', 'RepeatVector'),
    'SGD': ('optimizers', 'SGD'),
    'Sequential': ('models', 'Sequential'),
    'Softmax': ('layers', 'Softmax'),
    'TensorBoard': ('callbacks', 'TensorBoard'),
    'TimeDistributed': ('layers', 'TimeDistributed'),
    
    'binary_crossentropy': ('losses', 'binary_crossentropy'),
    'categorical_crossentropy': ('losses', 'categorical_crossentropy'),
    'cifar10': ('datasets', 'cifar10'),
    'clone_model': ('models', 'clone_model'),
    'custom_object_scope': ('utils', 'custom_object_scope'), 
    'deserialize_keras_object': (
        ('saving', 'deserialize_keras_object'), 
        ('utils', 'deserialize_keras_object')
    ),
    'glorot_uniform': ('initializers', 'glorot_uniform'),
    'load_model': ('models', 'load_model'),
    'mean_squared_error': ('losses', 'mean_squared_error'),
    'mnist': ('datasets', 'mnist'),
    'ones': ('backend', 'ones'),
    'random_normal': ('initializers', 'random_normal'),
    'register_keras_serializable': (
        ('saving', 'register_keras_serializable'), 
        ('utils', 'register_keras_serializable')
    ),
    'serialize_keras_object': (
        ('saving', 'serialize_keras_object'), 
        # ('utils', 'serialize_keras_object')
    ),
    'sum': ('backend', 'sum'),
    
}
# Configuration for KerasTuner
KERAS_TUNER_CONFIG = {
    'BayesianOptimization': ('keras_tuner', 'BayesianOptimization'),
    'Hyperband': ('keras_tuner', 'Hyperband'), 
    'HyperModel': ('keras_tuner', 'HyperModel'),
    'HyperParameters': ('keras_tuner', 'HyperParameters'),
    'Objective': ('keras_tuner', 'Objective'),
    'RandomSearch': ('keras_tuner', 'RandomSearch'),
    'Tuner': ('keras_tuner', 'Tuner'),
    'TunerCallback': (
        ('keras_tuner.src.engine.tuner_utils', 'TunerCallback'), 
        ('keras_tuner.engine.tuner_utils', 'TunerCallback')
    ),
}

